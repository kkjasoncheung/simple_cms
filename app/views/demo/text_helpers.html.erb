<% text = "This is some long sample text. It includes line breaks\n
	and double-line breaks.\n\n It rambles on and on and on. \n\n
	Until we get to the last line." 
%>

<!-- These are text helpers -->

<!-- for word_wrap , each time a line reaches 30 characters, \n is
added. Ensures lines of text are no longer than 30 characters. -->
<h2>word_wrap</h2>
<%= word_wrap(text, :line_width => 30) %>

<hr/>

<!-- HTML will not respect the \n generated by word_wrap. 
	simple_format identifies \n as a <br/> tag. 
	simple_format also recognizes \n\n as a paragraph and wraps 
	content before and after the \n\n in <p> </p> tags.
-->
<h2>simple_format</h2>
<%= simple_format(text) %>
<hr/>

<h2>simple_format + word_wrap</h2>
<%= simple_format(word_wrap(text, :line_width=>30)) %>
<hr/>

<!-- truncate: truncates the text based on the length provided.
	After the truncation, it will add the omission.
	:omission => nil , to remove omissions
-->

<h2>truncate</h2>
<%= truncate(text, :length=>40, :omission =>'...') %>
<hr/>

<!-- excerpt will find the target word (in this case 'includes') 
	and truncate 7 letters before and after and add an omission.
-->

<h2>excerpt</h2>
<%= excerpt(text,'includes', :radius=>7, :omission=>"...") %>
<hr />

<!-- highlight wraps the target text (in this case 'sample text') in 
	HTML tags which can be styled.
-->
<h2>highlight</h2>
<%= highlight(text, 'sample text') %>
<hr/>

<!-- highlight accepts an array to highlight more than 1 target
	text. :highlighter=> ... also wraps the target text in custom tags (<em></em>)
-->
<%= highlight(text, ['sample', 'rambles'], :highlighter => '<em>\1</em>') %>
<hr />

<!-- to pluralize a string directly, string.pluralize-->
<h2>pluralize</h2>
<%= "student".pluralize %> <br/>
<%= "ox".pluralize %><br>
<br>

<!-- another method of using pluralize 
	1st param) pass in a number to determine how many of the 'string'
	2nd param) pass in the 'string' to be pluralized
	* also outputs the integer (1st param)
	ex)
	pluralize(1, 'product') -> would yield 1 product
	pluralize(2, 'product') -> would yield 2 product's'
-->

<%= pluralize(2, 'product') %> <br>
<br>
<% [0, 1, 20].each do |n| %>
	<%= pluralize(n, 'product') %><br>
	<%= pluralize(n, 'octopus')%><br>
	
	<!-- providing your own plural string
		3rd param) allows you to set your own plural string 
	-->
	
	<%= pluralize(n, 'snipe', 'snope') %><br>
<% end %>

<br>

<hr>

<!-- cycle has an internal counter to see how many times it has been called. In this example, cycle outputs the first argument in the first iteration. Then it will output green, and then next blue. Once the last argument is outputted, the cycle will output red again.
	Cycles through each argument each loop/iteration.
-->
<h2>cycle</h2>
<% 5.times do %>
	<%= cycle('red','green','blue') %><br>
<% end %>






